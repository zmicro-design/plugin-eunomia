const cp = require('child_process');

$.verbose = false;

async function main() {
  try {
    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER is not set');
    }

    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID is not set');
    }

    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET is not set');
    }

    if (!process.env.EUNOMIA_PROJECT_ID) {
      throw new Error('env EUNOMIA_PROJECT_ID is not set');
    }

    const response = await fetch(`${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER}/api/open/v1/client/pipeline/${process.env.EUNOMIA_PROJECT_ID}/deploy_scripts`, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Client-ID': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID,
        'X-Client-Secret': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET,
      },
    });
    if (!response.ok) {
      let text = '';
      try {
        text = await response.text();
      } catch (err) {
        //
      }

      throw new Error(`unexpected response (status: ${response.status}, text: ${text}`);
    }

    const respData = await response.json();
    if (respData.code !== 200) {
      throw new Error(`unexpected response ${respData.message}`);
    }

    const { total, data } = respData.result;
    const all = data.length;
    for (const index in data) {
      const { id, name, content, host } = data[index];
      const script_filepath = `${process.env.EUNOMIA_DEPLOY_SCRIPTS_DIR}/${id}.sh`;
      fs.writeFileSync(script_filepath, generateScript(content));
      // const response = await $`gzcaas client -s ${hostIP} --scriptfile ${script_filepath} --envfile ${process.env.EUNOMIA_BUILD_ENV_SHELL}`
      // console.log('[execute_deploy_scripts] exit code:', response.exitCode);
      // if (response.exitCode !== 0) {
      //   throw new Error(`failed to execute script ${script_filepath}`);
      // }

      console.log(`[execute_deploy_scripts][${+index + 1}/${all}] execute step(${name}) on ${host.name}(${host.ip}) ...`);
      await runShell(`gzcaas client -s ${host.ip} --scriptfile ${script_filepath} --envfile ${process.env.EUNOMIA_BUILD_ENV_SHELL}`);
    }
  } catch (error) {
    console.error("[execute_deploy_scripts] catch error:", error);
    process.exit(1);
  }
}

function generateScript(content) {
  const scripts = [];
  function pre(lines) {
    for (const [name, script] of lines) {
      scripts.push(script)
    }
  }

  function post(lines) {
    for (const [name, script] of lines) {
      scripts.push(script)
    }
  }

  function main() {
    return scripts.push(content);
  }

  function get() {
    return scripts.join('\n');
  }

  pre([
    ['force exit on error', 'set -e'],
    // ['show eunomia version', 'log::info "[$(timestamp)] Eunomia: ${PLUGIN_VERSION}"'],
    ['show eunomia version', 'log::info "[$(timestamp)] Eunomia: $(plugin::version_echo eunomia)"'],
    //
    ['show zmicro version', 'log::info "[$(timestamp)] Zmicro: $(zmicro -v)"'],
    //
    ['show idp agent version', 'log::info "[$(timestamp)] IDP Agent: $(version::gzcaas)"'],
    //
    ['show os kernel', 'log::info "[$(timestamp)] OS Kernel: $(os::kernel)"'],
    ['show os release', 'log::info "[$(timestamp)] OS Release: $(os::release)"'],
    ['show os distribution', 'log::info "[$(timestamp)] OS Distribution: $(os::distribution)"'],
    ['show os platform', 'log::info "[$(timestamp)] OS Platform: $(os::platform)"'],
    ['show os arch', 'log::info "[$(timestamp)] OS Arch: $(os::arch)"'],
    //
    ['show cpu cores', 'log::info "[$(timestamp)] CPU Cores: $(os::cpu_cores)"'],
    ['show cpu brand', 'log::info "[$(timestamp)] CPU Brand: $(os::cpu_brand)"'],
    //
    ['show device id', 'log::info "[$(timestamp)] Device ID: $(os::device_id)"'],
    ['show device config', 'log::info "[$(timestamp)] Device Config: $(os::device_config)"'],
    //
    ['show hostname', 'log::info "[$(timestamp)] Hostname: $(os::hostname)"'],
    ['show net ip', 'log::info "[$(timestamp)] Net IP: $(net::get_ip_internal)"'],
    // ['show net ip global', 'log::info "[$(timestamp)] Net IP Global: $(net::get_ip)"'],
    //
    ['show curl version', 'log::info "[$(timestamp)] CURL: $(version::curl)"'],
    ['show wget version', 'log::info "[$(timestamp)] WGET: $(version::wget)"'],
    ['show ssh version', 'log::info "[$(timestamp)] SSH: $(version::ssh)"'],
    ['show git version', 'log::info "[$(timestamp)] Git: $(version::git)"'],
    //
    ['show docker version', 'log::info "[$(timestamp)] Docker: $(version::docker)"'],
    //
    // ['show kubectl version', 'log::info "[$(timestamp)] Kubectl: $(version::kubectl)"'],
    // Language
    ['show nodejs version', 'log::info "[$(timestamp)] Node.js: $(version::node)"'],
    ['show go version', 'log::info "[$(timestamp)] Go: $(version::go)"'],
    ['show python version', 'log::info "[$(timestamp)] Python: $(version::python)"'],
    ['show java version', 'log::info "[$(timestamp)] Java: $(version::java)"'],
    ['show rust version', 'log::info "[$(timestamp)] Rust: $(version::rust)"'],
    //
    ['show current directory', 'log::info "[$(timestamp)] current directory: $(pwd)"'],
  ])
  main()
  post([
    ['show current directory', 'log::info "[$(timestamp)] current directory: $(pwd)"'],
  ])

  return get();
}

async function runShell(command, options) {
  if (options?.env) {
    for (const key in options.env) {
      process.env[key] = '' + options.env[key];
    }
  }

  return new Promise((resolve, reject) => {
    const child = cp.spawn(command, {
      shell: true,
      stdio: 'inherit',
      cwd: options?.cwd || $.cwd,
    });

    child.on('exit', (code) => {
      if (code !== 0) return reject(`process exit code: ${code} (command: ${command})`);

      resolve();
    });

    child.on('error', (error) => {
      return reject(`run command error (command: ${command}, error: ${error?.message})`);
    });
  });
}

main();
