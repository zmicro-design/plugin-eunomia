const cp = require('child_process');

$.verbose = false;

async function main() {
  // 1. 获取配置
  console.log(`[execute_build_scripts][getConfig] (id: ${process.env.EUNOMIA_BUILD_CONFIG_ID})...`);
  const cfg = await getConfig();

  // 2. 获取脚本
  console.log(`[execute_build_scripts][getScripts] ...`);
  const scripts = await getScripts();

  // 3. 执行脚本
  await runScripts(scripts, cfg);
}

async function getConfig() {
  if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER) {
    throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER is not set');
  }

  if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID) {
    throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID is not set');
  }

  if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET) {
    throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET is not set');
  }

  // if not set, return empty object
  if (!process.env.EUNOMIA_BUILD_CONFIG_ID) {
    return {};
  }

  const response = await fetch(`${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER}/api/open/v1/client/config/${process.env.EUNOMIA_BUILD_CONFIG_ID}`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Client-ID': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID,
      'X-Client-Secret': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET,
    },
  });
  if (!response.ok) {
    let text = '';
    try {
      text = await response.text();
    } catch (err) {
      //
    }

    throw new Error(`unexpected response (status: ${response.status}, text: ${text}`);
  }

  const data = await response.json();
  if (data.code !== 200) {
    throw new Error(`unexpected response ${data.message}`);
  }

  const cfg = {};
  // data.result.config is envfile, parse it to object
  const lines = (data.result.config || '').split('\n');
  for (const line of lines) {
    if (!line) continue;

    const [key, value] = line.split('=');
    if (!key) continue;
    if (key.startsWith('#')) continue;

    cfg[key] = value;
  }

  return cfg;
}

async function getScripts() {
  try {
    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER is not set');
    }

    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID is not set');
    }

    if (!process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET) {
      throw new Error('env PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET is not set');
    }

    if (!process.env.EUNOMIA_PROJECT_ID) {
      throw new Error('env EUNOMIA_PROJECT_ID is not set');
    }

    const response = await fetch(`${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER}/api/open/v1/client/pipeline/${process.env.EUNOMIA_PROJECT_ID}/build_scripts`, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Client-ID': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID,
        'X-Client-Secret': process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET,
      },
    });
    if (!response.ok) {
      let text = '';
      try {
        text = await response.text();
      } catch (err) {
        //
      }

      throw new Error(`unexpected response (status: ${response.status}, text: ${text}`);
    }

    const respData = await response.json();
    if (respData.code !== 200) {
      throw new Error(`unexpected response ${respData.message}`);
    }

    const { total, data } = respData.result;
    // []{ id, type, name, content, env, product_dir }
    return data || [];
  } catch (error) {
    console.error("[execute_build_scripts] catch error:", error);
    process.exit(1);
  }
}

async function runScripts(data, cfg) {
  const all = data.length;

  try {
    for (const index in data) {
      const {
        id,
        type = 'custom_script',
        name,
        content,
        env,
        product_dir,
      } = data[index];

      const script_filepath = `${process.env.EUNOMIA_BUILD_SCRIPTS_DIR}/${id}.sh`;
      const script_generated_filepath = `${process.env.EUNOMIA_BUILD_SCRIPTS_DIR}/${id}.generated.sh`;
      const product_dir_host = `${process.env.EUNOMIA_BUILD_PRODUCT_DIR}/${id}`;
      const product_id = `product.${process.env.EUNOMIA_BUILD_ID}.${id}`;
      const product_filename = `${product_id}.tar.gz`;
      const product_md5_filename = `${product_filename}.md5`;
      const product_filepath = `${process.env.EUNOMIA_BUILD_PRODUCT_DIR}/${product_filename}`;
      const product_md5_filepath = `${process.env.EUNOMIA_BUILD_PRODUCT_DIR}/${product_md5_filename}`;

      fs.writeFileSync(script_filepath, content);
      // const response = await $`gzcaas client -s ${hostIP} --scriptfile ${script_filepath} --envfile ${process.env.EUNOMIA_BUILD_ENV_SHELL}`
      // console.log('[execute_build_scripts] exit code:', response.exitCode);
      // if (response.exitCode !== 0) {
      //   throw new Error(`failed to execute script ${script_filepath}`);
      // }

      let _script = [];

      if (type === 'docker_image') {
        console.log(`[execute_build_scripts][${+index + 1}/${all}] execute step(${name}) with type(${type}) ...`);

        _script = [
          `docker buildx build --push`,
          `--progress=plain`,
          `--tag ${process.env.EUNOMIA_BUILD_DOCKER_IMAGE_NAME}:commit_${process.env.EUNOMIA_GIT_COMMIT}`,
          `--tag ${process.env.EUNOMIA_BUILD_DOCKER_IMAGE_NAME}:build_${process.env.PIPELINE_BUILD_ID}`,
        ];

        const envs = await getEnv();
        for (const env of envs) {
          const [env_name, env_value] = env.split('=');
          _script.push(`--build-arg ${env_name}="${env_value}"`);
        }

        if (process.env.EUNOMIA_DOCKER_BUILDX_PLATFORMS) {
          _script.push(`--platform ${process.env.EUNOMIA_DOCKER_BUILDX_PLATFORMS}`);
        }

        let context = process.env.EUNOMIA_BUILD_GIT_DIR
        if (process.env.EUNOMIA_BUILD_DOCKER_BUILD_CONTEXT) {
          context = process.env.EUNOMIA_BUILD_GIT_DIR + '/' + process.env.EUNOMIA_BUILD_DOCKER_BUILD_CONTEXT
        }

        // check dockerfile
        const dockerfile = `${context}/Dockerfile`;
        try {
          await fs.promises.access(dockerfile);
        } catch (error) {
          throw new Error(`dockerfile ${dockerfile} not found`);
        }

        _script.push(context)
      } else if (type === 'custom_script') {
        console.log(`[execute_build_scripts][${+index + 1}/${all}] execute step(${name}) with type(${type}) + env(${env.name}) ...`);
        // await runShell(`source ${process.env.EUNOMIA_BUILD_ENV_SHELL} && bash ${script_filepath}`);
        // await runShell(`bash ${script_filepath}`);

        // await runShell(`log::info "[$(timestamp)] prepare env with image(${env.image}) ..."`);
        console.log(`[${+index + 1}/${all}][${name}][1] 准备环境(${env.image}) ...`);
        await runShell(`docker pull ${env.image}`);
        // await runShell(`log::info "[$(timestamp)] execute the build script with env(${name}) ..."`);
        console.log(`[${+index + 1}/${all}][${name}][2] 执行代码 ...`);

        const workdir = '/build';
        
        const build_script = [
          `docker run -i --rm`,
          `--env-file ${process.env.EUNOMIA_BUILD_ENV_SHELL}`,
          `--volume ${process.env.EUNOMIA_BUILD_GIT_DIR}:/build`,
          `--volume ${script_filepath}:/script.sh`,
        ];

        // apply cfg as env
        if (!!cfg) {
          for (const key in cfg) {
            build_script.push(`--env "${key}=${cfg[key]}"`);
          }
        }

        if (!!product_dir) {
          if (product_dir.startsWith('/')) {
            build_script.push(`--volume ${product_dir_host}:${product_dir}`);
          } else {
            build_script.push(`--volume ${product_dir_host}:${workdir}/${product_dir}`);
          }
        }

        build_script.push([
          `--workdir ${workdir}`,
          `${env.image}`,
          `bash /script.sh`,
        ].join(' '));

        _script.push(build_script.join(' '));

        if (!!product_dir) {
          // generate product package
          _script.push(`tar -zcvf ${product_filepath} -C ${product_dir_host} .`);
          
          // generate product package md5
          _script.push(`md5sum ${product_filepath} > ${product_md5_filepath}`);

          // upload product package to idp object storage
          _script.push([
            `curl -X POST`,
            `-H "Content-Type: multipart/form-data"`,
            `-H "X-Client-ID: ${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID}"`,
            `-H "X-Client-Secret: ${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET}"`,
            `-F "name=${product_filename}"`,
            `-F "file=@${product_filepath}"`,
            `${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER}/api/open/v1/client/deployments/${process.env.EUNOMIA_DEPLOYMENT_ID}/upload`,
          ].join(' '));

          // upload product package md5 to idp object storage
          _script.push([
            `curl -X POST`,
            `-H "Content-Type: multipart/form-data"`,
            `-H "X-Client-ID: ${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID}"`,
            `-H "X-Client-Secret: ${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET}"`,
            `-F "name=${product_md5_filename}"`,
            `-F "file=@${product_md5_filepath}"`,
            `${process.env.PLUGIN_EUNOMIA_CONFIG_CENTER}/api/open/v1/client/deployments/${process.env.EUNOMIA_DEPLOYMENT_ID}/upload`,
          ].join(' '));
        }
      } else {
        throw new Error(`unexpected build script type ${type}`);
      }
     

      const script = _script.join('\n\n');

      fs.writeFileSync(script_generated_filepath, script);
      await runShell(script);
    }
  } catch (error) {
    console.error("[execute_build_scripts] catch error:", error);
    process.exit(1);
  }
}

async function runShell(command, options) {
  if (options?.env) {
    for (const key in options.env) {
      process.env[key] = '' + options.env[key];
    }
  }

  return new Promise((resolve, reject) => {
    const child = cp.spawn(command, {
      shell: true,
      stdio: 'inherit',
      cwd: options?.cwd || $.cwd,
    });

    child.on('exit', (code) => {
      if (code !== 0) return reject(`run command error (command: ${command}, code: ${code})`);

      resolve();
    });

    child.on('error', (error) => {
      return reject(`run command error (command: ${command}, error: ${error?.message})`);
    });
  });
}

function getEnv() {
  const ignoreKeys = [
    'SHELL',
    'PWD',
    'USER',
    'LOGNAME',
    'HOME',
    'PATH',
    'LANG',
    'TERM',
    'SHLVL',
    'HISTSIZE',
    'BLACK',
    'GREEN',
    'GRAY',
    'RED',
    'YELLOW',
    'PURPLE',
    'BLUE',
    'CYAN',
    'ENDCOLOR',
    'HOSTNAME',
    'MAIL',
    'EUNOMIA_ENV_FILE',
    // flow
    'execute_cmd',
    //
    '_',
    //
    'GOPATH',
    'GOHOME',
    'NPM_CONFIG_REGISTRY',
    'LESSOPEN',
    'triggerId',
    'triggerMode',
    'webhook',
    'machine_group_id',
    'mixFlowInstId',
    'parentMixFlowInstId',
    'pause_strategy',
    'OLDPWD',
    'branch',
    'caches',
    'HISTCONTROL',
    'pipelineId',
    'TODAY',
    'TIMESTAMP',
    'DATETIME',
    'appId',
    'package_download_path',
    'pipelineConfigId',
    'LOG_LEVEL',
    'TZ',
    //
    'EUNOMIA_BUILD_TIMESTAMP',
    'EUNOMIA_RUNNER_NAME',
    //
    'EUNOMIA_DEPLOYMENT_DEV_DOCKER_HOST',
    'EUNOMIA_DEPLOYMENT_PROD_DOCKER_HOST',
    'EUNOMIA_DEPLOYMENT_DOCKER_HOST',
    'EUNOMIA_DEPLOYMENT_MANIFEST_FILE',
    'EUNOMIA_DEPLOY_SCRIPTS_DIR',
    'EUNOMIA_DEPLOY_SCRIPT',
  ];

  const whiteKeysNeedBase64 = [
    'ta_version',
    'withHermes',
    'withMobile',
    //
    'env',
    'docker_url',
    //
    'lang',
    //
    'API',
    //
    'TARGET', //
    //
    'GIT_SERVER',
    'GIT_USERNAME',
    'GIT_PASSWORD',
    //
    'CONFIG_CENTER_CLIENT_ID',
    'CONFIG_CENTER_CLIENT_SECRET',
    'CONFIG_CENTER_CONFIG_ID',
  ];

  const ignoreKeysMap = {};
  ignoreKeys.forEach((key) => {
    ignoreKeysMap[key] = true;
  });

  const whiteKeysNeedBase64Map = {};
  whiteKeysNeedBase64.forEach((key) => {
    whiteKeysNeedBase64Map[key] = true;
  });

  function decode(text) {
    return Buffer.from(text, 'base64').toString('utf8');
  }

  function isBase64(str) {
    const base64Regex = /^[a-zA-Z0-9+/]*={0,2}$/;
    if (!base64Regex.test(str)) {
      return false; // 不符合 Base64 编码规范
    }

    try {
      return Buffer.from(str, 'base64').toString('base64') === str;
    } catch (error) {
      return false;
    }
  }

  function isReadable(str) {
    // ascii
    if (/^[\x00-\x7F]+$/.test(str)) {
      return true;
    }

    // unicode 
    if (/^[\u4E00-\u9FFF]+$/u.test(str)) {
      return true;
    }

    // // unicode readable
    // if (/^[\x20-\x7E\u00A0-\u{10FFFF}]+$/u.test(str)) {
    //   return true;
    // }

    return false;
  }

  function fn() {
    const writeFileName = process.env.EUNOMIA_BUILD_ENV_SHELL
    if (!writeFileName) {
      throw new Error('env EUNOMIA_BUILD_ENV_SHELL is not set');
    }

    const env = process.env;
    let new_envs = [];
    for (const key in env) {
      if (ignoreKeysMap[key]) continue;

      // @TODO remove BASH_FUNC_*
      if (key.startsWith('BASH_FUNC_')) continue;

      // @TODO remove ZMICRO_*
      if (key.startsWith('ZMICRO_')) continue;

      // @TODO remove PLUGIN_*
      if (key.startsWith('PLUGIN_')) continue;

      // @TODO remove PIPELINE_*
      if (key.startsWith('PIPELINE_')) continue;

      // @TODO remove zoox_*
      if (key.startsWith('zoox_')) continue;

      // @TODO remove ENGINE_*
      if (key.startsWith('ENGINE_')) continue;

      // @TODO remove EXECUTOR_*
      if (key.startsWith('EXECUTOR_')) continue;

      // @TODO remove execute_*
      if (key.startsWith('execute_')) continue;

      // @TODO remove BUILD_*
      if (key.startsWith('BUILD_')) continue;

      // @TODO remove eunomia_*
      if (key.startsWith('eunomia_')) continue;

      // @TODO remove XDG_*
      if (key.startsWith('XDG_')) continue;

      // @TODO remove LD_*
      if (key.startsWith('LD_')) continue;

      // @TODO remove DEFAULT_*
      if (key.startsWith('DEFAULT_')) continue;

      // @TODO remove NODE_*
      if (key.startsWith('NODE_')) continue;

      // @TODO remove root*
      if (key.startsWith('root')) continue;

      let value = env[key];

      if (process.env.EUNOMIA_BUILD_TRIGGER !== 'idp') {
        // white keys need base64 decode
        if (!!whiteKeysNeedBase64Map[key]) {
          value = decode(env[key]);
        }

        // user var need base64 decode
        if (key.startsWith('EUNOMIA_USER_VAR_')) {
          value = decode(env[key]);
        }
      }

      if (process.env.FLOW_CI === 'true') {
        if (!isBase64(env[key])) continue;

        value = decode(env[key]);
        if (!isReadable(value)) continue;
      }

      // new_envs.push(`${key}=${JSON.stringify(value)}`);
      new_envs.push(`${key}=${value}`);
    }

    return new_envs;
  }

  return fn();
}

main();
