const ignoreKeys = [
  'SHELL',
  'PWD',
  'USER',
  'LOGNAME',
  'HOME',
  'PATH',
  'LANG',
  'TERM',
  'SHLVL',
  'HISTSIZE',
  'BLACK',
  'GREEN',
  'GRAY',
  'RED',
  'YELLOW',
  'PURPLE',
  'BLUE',
  'CYAN',
  'ENDCOLOR',
  'HOSTNAME',
  'MAIL',
  'EUNOMIA_ENV_FILE',
  // flow
  'execute_cmd',
  //
  '_',
  //
  'GOPATH',
  'GOHOME',
  'NPM_CONFIG_REGISTRY',
  'LESSOPEN',
  'triggerId',
  'triggerMode',
  'webhook',
  'machine_group_id',
  'mixFlowInstId',
  'parentMixFlowInstId',
  'pause_strategy',
  'OLDPWD',
  'branch',
  'caches',
  'HISTCONTROL',
  'pipelineId',
  'TODAY',
  'TIMESTAMP',
  'DATETIME',
  'appId',
  'package_download_path',
  'pipelineConfigId',
  'LOG_LEVEL',
  'TZ',
  //
  'EUNOMIA_BUILD_TIMESTAMP',
  'EUNOMIA_RUNNER_NAME',
  //
  'EUNOMIA_DEPLOYMENT_DEV_DOCKER_HOST',
  'EUNOMIA_DEPLOYMENT_PROD_DOCKER_HOST',
  'EUNOMIA_DEPLOYMENT_MANIFEST_FILE',
  'EUNOMIA_DEPLOY_SCRIPTS_DIR',
  'EUNOMIA_DEPLOY_SCRIPT',
  //
  'DOCKER_HOST',
  //
  'EUNOMIA_DEPLOYMENT_IGNORE',
  'EUNOMIA_DEPLOYMENT_CPU_LIMIT',
  'EUNOMIA_DEPLOYMENT_MEM_LIMIT',
  'EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME',
  //
  'CAAS_CLIENT_ID',
  'CAAS_CLIENT_SECRET',
  'CAAS_METADATA_DIR',
  'CAAS_WORKDIR',
  'CAAS_SHELL',
];

const whiteKeysNeedBase64 = [
  'ta_version',
  'withHermes',
  'withMobile',
  //
  'env',
  'docker_url',
  //
  'lang',
  //
  'API',
  //
  'TARGET', //
  //
  'GIT_SERVER',
  'GIT_USERNAME',
  'GIT_PASSWORD',
  //
  'CONFIG_CENTER_CLIENT_ID',
  'CONFIG_CENTER_CLIENT_SECRET',
  'CONFIG_CENTER_CONFIG_ID',
];

const ignoreKeysMap = {};
ignoreKeys.forEach((key) => {
  ignoreKeysMap[key] = true;
});

const whiteKeysNeedBase64Map = {};
whiteKeysNeedBase64.forEach((key) => {
  whiteKeysNeedBase64Map[key] = true;
});

function decode(text) {
  return Buffer.from(text, 'base64').toString('utf8');
}

function isBase64(str) {
  const base64Regex = /^[a-zA-Z0-9+/]*={0,2}$/;
  if (!base64Regex.test(str)) {
    return false; // 不符合 Base64 编码规范
  }

  try {
    return Buffer.from(str, 'base64').toString('base64') === str;
  } catch (error) {
    return false;
  }
}

function isReadable(str) {
  // ascii
  if (/^[\x00-\x7F]+$/.test(str)) {
    return true;
  }

  // unicode 
  if (/^[\u4E00-\u9FFF]+$/u.test(str)) {
    return true;
  }

  // // unicode readable
  // if (/^[\x20-\x7E\u00A0-\u{10FFFF}]+$/u.test(str)) {
  //   return true;
  // }

  return false;
}

function main() {
  const writeFileName = process.env.EUNOMIA_BUILD_ENV_SHELL
  if (!writeFileName) {
    throw new Error('env EUNOMIA_BUILD_ENV_SHELL is not set');
  }

  const env = process.env;
  let new_envs = [];
  for (const key in env) {
    if (ignoreKeysMap[key]) continue;

    // @TODO remove BASH_FUNC_*
    if (key.startsWith('BASH_FUNC_')) continue;

    // @TODO remove ZMICRO_*
    if (key.startsWith('ZMICRO_')) continue;

    // @TODO remove PLUGIN_*
    if (key.startsWith('PLUGIN_')) continue;

    // @TODO remove PIPELINE_*
    if (key.startsWith('PIPELINE_')) continue;

    // @TODO remove zoox_*
    if (key.startsWith('zoox_')) continue;

    // @TODO remove ENGINE_*
    if (key.startsWith('ENGINE_')) continue;

    // @TODO remove EXECUTOR_*
    if (key.startsWith('EXECUTOR_')) continue;

    // @TODO remove execute_*
    if (key.startsWith('execute_')) continue;

    // @TODO remove BUILD_*
    if (key.startsWith('BUILD_')) continue;

    // @TODO remove eunomia_*
    if (key.startsWith('eunomia_')) continue;

    // @TODO remove XDG_*
    if (key.startsWith('XDG_')) continue;

    // @TODO remove LD_*
    if (key.startsWith('LD_')) continue;

    // @TODO remove DEFAULT_*
    if (key.startsWith('DEFAULT_')) continue;

    // @TODO remove NODE_*
    if (key.startsWith('NODE_')) continue;

    // @TODO remove root*
    if (key.startsWith('root')) continue;
    
    let value = env[key];

    if (process.env.EUNOMIA_BUILD_TRIGGER !== 'idp') {
      // white keys need base64 decode
      if (!!whiteKeysNeedBase64Map[key]) {
        value = decode(env[key]);
      }
      
      // user var need base64 decode
      if (key.startsWith('EUNOMIA_USER_VAR_')) {
        value = decode(env[key]);
      }
    }

    if (process.env.FLOW_CI === 'true') {
      if (!isBase64(env[key])) continue;

      value = decode(env[key]);
      if (!isReadable(value)) continue;
    }

    // new_envs.push(`${key}=${JSON.stringify(value)}`);
    new_envs.push(`${key}=${value}`);
  }

  // console.log('clean build/deploy shell env:', writeFileName);
  fs.writeFileSync(writeFileName, new_envs.join('\n'));
}

main();
