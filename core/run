#!/bin/bash

eunomia::run() {
  if [ -z "$PLUGIN_EUNOMIA_BUILD_GIT_DIR" ]; then
    log::error "[eunomia::run] PLUGIN_EUNOMIA_BUILD_GIT_DIR is required"
    return 1
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_BUILD_GIT_DIR" ]; then
    log::error "[eunomia::run] PLUGIN_EUNOMIA_BUILD_GIT_DIR($PLUGIN_EUNOMIA_BUILD_GIT_DIR) not found, you must run prepare first"
    return 1
  fi

  log::info "[eunomia::run] start ..."

  # # Dockerfile
  # cp ${PLUGIN_EUNOMIA_DOCKERFILE_FOR_GIT_REPO} $PLUGIN_EUNOMIA_BUILD_GIT_DIR
  # # DOCKERFILE_DIR/*
  # cp ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/* $PLUGIN_EUNOMIA_BUILD_GIT_DIR

  # RSYNC DOKCERFILE_DIR/*
  # @TODO with "DIR/" suffix copy file
  rsync -av --exclude="$PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO" ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/ $PLUGIN_EUNOMIA_BUILD_GIT_DIR
  # rsync -av ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/ $PLUGIN_EUNOMIA_BUILD_GIT_DIR
  # cp -rf ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/* $PLUGIN_EUNOMIA_BUILD_GIT_DIR
  # fix dot files
  # cp -rf ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/.* $PLUGIN_EUNOMIA_BUILD_GIT_DIR

  # ADD build files for dockerfile
  echo "EUNOMIA_GIT_REPO_URL: $PLUGIN_EUNOMIA_GIT_REPO_URL" >$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_REPO_NAME: $PLUGIN_EUNOMIA_GIT_REPO_NAME" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_BRANCH: $PLUGIN_EUNOMIA_GIT_BRANCH" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_COMMIT: $PLUGIN_EUNOMIA_GIT_COMMIT" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_COMMIT_MESSAGE: $PLUGIN_EUNOMIA_GIT_COMMIT_MESSAGE" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_COMMIT_AUTHOR: $PLUGIN_EUNOMIA_GIT_COMMIT_AUTHOR" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_GIT_COMMIT_TIMESTAMP: $PLUGIN_EUNOMIA_GIT_COMMIT_TIMESTAMP" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  #
  echo "EUNOMIA_BUILD_ID: $PLUGIN_EUNOMIA_BUILD_ID" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_BUILD_AUTHOR: ${PLUGIN_EUNOMIA_BUILD_AUTHOR}" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_BUILD_AUTHOR_EMAIL: ${PLUGIN_EUNOMIA_BUILD_AUTHOR_EMAIL}" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_BUILD_TIMESTAMP: $PLUGIN_EUNOMIA_BUILD_TIMESTAMP" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  #
  echo "EUNOMIA_PROJECT_ID: $PLUGIN_EUNOMIA_PROJECT_ID" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_TASK_ID: $PLUGIN_EUNOMIA_TASK_ID" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_DEPLOYMENT_ID: $PLUGIN_EUNOMIA_DEPLOYMENT_ID" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
  echo "EUNOMIA_JOB_ID: $PLUGIN_EUNOMIA_JOB_ID" >>$PLUGIN_EUNOMIA_BUILD_GIT_DIR/build.eunomia.js

  # @DEPRECIATED @TO_REMOVE
  echo "$PLUGIN_EUNOMIA_BUILD_ID" >$PLUGIN_EUNOMIA_BUILD_GIT_DIR/buildid.eunomia.js
  echo "$PLUGIN_EUNOMIA_BUILD_TIMESTAMP" >$PLUGIN_EUNOMIA_BUILD_GIT_DIR/buildtime.eunomia.js

  log::info "[eunomia::run] build ..."
  zmicro pipeline once run
  if [ "$?" != "0" ]; then
    log::error "[eunomia::run] failed to run"
    return 1
  fi

  # clean
  rm -rf $PLUGIN_EUNOMIA_BUILD_GIT_DIR

  log::info "[eunomia::run] done"
}

export -f eunomia::run
