#!/bin/bash

# gvm::current gets the current version of Go
eunomia::prepare() {
  if [ -z "$PLUGIN_EUNOMIA_BUILD_ID" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_BUILD_ID is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_GIT_REPO_NAME" ]; then
    log::error "[eunomia::build] PLUGIN_EUNOMIA_GIT_REPO_NAME is required"
    return 1
  fi

  if [ -z "$(echo $PLUGIN_EUNOMIA_GIT_REPO_NAME | awk -F '/' '{print $2}')" ]; then
    log::error "[eunomia::build] PLUGIN_EUNOMIA_GIT_REPO_NAME is invalid, must be in the format of 'owner/repo'"
    return 1
  fi

  export PLUGIN_EUNOMIA_GIT_REPO_DIR=$PLUGIN_EUNOMIA_GIT_DIR/$PLUGIN_EUNOMIA_BUILD_ID
  export PLUGIN_EUNOMIA_GIT_DOT_ENV=$PLUGIN_EUNOMIA_GIT_REPO_DIR/.eunomia

  export PLUGIN_EUNOMIA_GIT_REPO_NAME=$PLUGIN_EUNOMIA_GIT_REPO_NAME
  export PLUGIN_EUNOMIA_GIT_REPO_PKG=$PLUGIN_EUNOMIA_GIT_REPO_PKG
  # Dockerfile
  export PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE=${PLUGIN_EUNOMIA_DOCKERFILES_DIR}/${PLUGIN_EUNOMIA_GIT_REPO_NAME}/Dockerfile
  export PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV=${PLUGIN_EUNOMIA_DOCKERFILES_DIR}/${PLUGIN_EUNOMIA_GIT_REPO_NAME}/.eunomia
  if [ ! -f "$PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE" ]; then
    log::error "[eunomia::build] Dockerfile not found at for $PLUGIN_EUNOMIA_GIT_REPO_NAME"
    return 1
  fi

  export PLUGIN_EUNOMIA_DOCKER_REGISTRY=${PLUGIN_EUNOMIA_DOCKER_REGISTRY:-"docker-ta.thinkingdata.cn"}
  if [ -z "$PLUGIN_EUNOMIA_DOCKER_REGISTRY" ]; then
    log::error "[eunomia::build] PLUGIN_EUNOMIA_DOCKER_REGISTRY is required"
    return 1
  fi

  # EXPORT
  export PLUGIN_EUNOMIA_EXPORT_ID_DIR=${PLUGIN_EUNOMIA_EXPORT_DIR}/$PLUGIN_EUNOMIA_BUILD_ID
  export PLUGIN_EUNOMIA_EXPORT_ID_PKG=${PLUGIN_EUNOMIA_EXPORT_ID_DIR}.tar.gz

  #
  export PLUGIN_EUNOMIA_RUNNER_NAME=${PLUGIN_EUNOMIA_DOCKER_CONTAINER_PREFIX}${PLUGIN_EUNOMIA_BUILD_ID}
  # 指定容器构建产物目录，默认是 /var/www/html
  export PLUGIN_EUNOMIA_RUNNER_DIST_DIR=${PLUGIN_EUNOMIA_RUNNER_DIST_DIR:-"/var/www/html"}

  if [ ! -d "$PLUGIN_EUNOMIA_GIT_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_GIT_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_BUILD_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_BUILD_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_PKG_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_PKG_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_EXPORT_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_EXPORT_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_GIT_REPO_PKG_TMP_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_GIT_REPO_PKG_TMP_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_GIT_REPO_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_GIT_REPO_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_BUILD_ID_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_BUILD_ID_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_DOCKERFILES_DIR" ]; then
    log::error "[config] Dockerfiles Dir($PLUGIN_EUNOMIA_DOCKERFILES_DIR) not found"
    return 1
  fi

  if [ -z "$(ls $PLUGIN_EUNOMIA_DOCKERFILES_DIR)" ]; then
    log::error "[config] Dockerfiles Dir($PLUGIN_EUNOMIA_DOCKERFILES_DIR) is empty"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_GIT_REPO_NAME" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_GIT_REPO_NAME is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_GIT_REPO_PKG" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_GIT_REPO_PKG is required"
    return 1
  fi

  if [ ! -f "$PLUGIN_EUNOMIA_GIT_REPO_PKG" ]; then
    log::error "[prepare] file($PLUGIN_EUNOMIA_GIT_REPO_PKG) is not found"
    return 1
  fi

  # PIPELINE
  export PIPELINE_BUILD_ID=${PLUGIN_EUNOMIA_BUILD_ID}
  export PIPELINE_BUILD_CONTEXT=$PLUGIN_EUNOMIA_BUILD_ID_DIR
  export PIPELINE_GIT_REPOSITORY_DIR=$PLUGIN_EUNOMIA_GIT_REPO_DIR
  export PIPELINE_DOCKER_REGISTRY=$PLUGIN_EUNOMIA_DOCKER_REGISTRY
  export PIPELINE_IMAGE_NAME=$PLUGIN_EUNOMIA_GIT_REPO_NAME
  export PIPELINE_IMAGE_TAGS=commit_${PLUGIN_EUNOMIA_BUILD_HASH:-${PLUGIN_EUNOMIA_BUILD_ID}}

  if [ -n "$PIPELINE_IMAGE_TAGS" ]; then
    export PLUGIN_EUNOMIA_RUNNER_IMAGE=$PLUGIN_EUNOMIA_DOCKER_REGISTRY/$PIPELINE_IMAGE_NAME:$PIPELINE_IMAGE_TAGS
  fi

  # @TODO PLUGIN_EUNOMIA_GIT_REPO_PKG 很可能是固定路径，这里用于快速备份，避免被后续部署覆盖
  if [ ! -f "$PLUGIN_EUNOMIA_BUILD_ID_PKG" ]; then
    cp $PLUGIN_EUNOMIA_GIT_REPO_PKG $PLUGIN_EUNOMIA_BUILD_ID_PKG
  fi

  # Extract Git Repo
  if [ -z "$(ls $PLUGIN_EUNOMIA_GIT_REPO_DIR)" ]; then
    tar -zxvf $PLUGIN_EUNOMIA_BUILD_ID_PKG -C $PLUGIN_EUNOMIA_GIT_REPO_DIR >>/dev/null
  fi

  # check env .eunomia
  # echo "check env .eunomia: $PLUGIN_EUNOMIA_GIT_DOT_ENV"
  if [ -f "$PLUGIN_EUNOMIA_GIT_DOT_ENV" ]; then
    log::info "[prepare] load user env .eunomia: $PLUGIN_EUNOMIA_GIT_DOT_ENV"

    cat $PLUGIN_EUNOMIA_GIT_DOT_ENV

    dotenv::load $PLUGIN_EUNOMIA_GIT_DOT_ENV
    if [ "$?" != "0" ]; then
      log::error "[prepare] failed to load repo env($PLUGIN_EUNOMIA_GIT_DOT_ENV)"
      return 1
    fi

    # echo "check env PLUGIN_EUNOMIA_BUILD_HASH: $PLUGIN_EUNOMIA_BUILD_HASH"
    # echo "check env PIPELINE_BUILD_HASH: $PIPELINE_BUILD_HASH"
    if [ -n "$PLUGIN_EUNOMIA_BUILD_HASH" ]; then
      export PIPELINE_IMAGE_TAGS=commit_${PLUGIN_EUNOMIA_BUILD_HASH}
    elif [ -n "$PIPELINE_BUILD_HASH" ]; then
      export PIPELINE_IMAGE_TAGS=commit_${PIPELINE_BUILD_HASH}
    fi

    export PLUGIN_EUNOMIA_RUNNER_IMAGE=$PLUGIN_EUNOMIA_DOCKER_REGISTRY/$PIPELINE_IMAGE_NAME:$PIPELINE_IMAGE_TAGS
  fi

  # Dockerfile env
  # support custom PLUGIN_EUNOMIA_RUNNER_DIST_DIR and others
  if [ -f "${PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV}" ]; then
    log::info "[prepare] load docker env(${PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV})"

    cat $PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV

    dotenv::load $PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV
    if [ "$?" != "0" ]; then
      log::error "[prepare] failed to load dockerfile .eunomia($PLUGIN_EUNOMIA_GIT_REPO_DOCKERFILE_ENV)"
      return 1
    fi
  fi

  # After Load Env

  # @TODO USER
  export PLUGIN_EUNOMIA_EXECUTOR_EMAIL=${PLUGIN_EUNOMIA_EXECUTOR_EMAIL:-$PIPELINE_EXECUTOR_EMAIL}
  export PLUGIN_EUNOMIA_EXECUTOR_NAME=${PLUGIN_EUNOMIA_EXECUTOR_NAME:-$PIPELINE_EXECUTOR_NAME}
  export PLUGIN_EUNOMIA_EXECUTOR_ID=${PLUGIN_EUNOMIA_EXECUTOR_ID:-$PIPELINE_EXECUTOR_ID}

  # @TODO Eunomia Manager
  export EUNOMIA_PROJECT_ID=${EUNOMIA_PROJECT_ID:-$PIPELINE_PROJECT_ID}
  export EUNOMIA_TASK_ID=${EUNOMIA_TASK_ID:-$PIPELINE_TASK_ID}
  export EUNOMIA_DEPLOYMENT_ID=${EUNOMIA_DEPLOYMENT_ID:-$PIPELINE_DEPLOYMENT_ID}
  export EUNOMIA_JOB_ID=${EUNOMIA_JOB_ID:-$PIPELINE_JOB_ID}

  # Log Eunomia Manager Info
  if [ -n "$EUNOMIA_PROJECT_ID" ]; then
    log::info "[prepare] EUNOMIA_PROJECT_ID: $EUNOMIA_PROJECT_ID"
    log::info "[prepare] EUNOMIA_TASK_ID: $EUNOMIA_TASK_ID"
    log::info "[prepare] EUNOMIA_DEPLOYMENT_ID: $EUNOMIA_DEPLOYMENT_ID"
    log::info "[prepare] EUNOMIA_JOB_ID: $EUNOMIA_JOB_ID"
  fi
}

export -f eunomia::prepare
