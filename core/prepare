#!/bin/bash

# gvm::current gets the current version of Go
eunomia::prepare() {
  if [ -z "$PLUGIN_EUNOMIA_BUILD_ID" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_BUILD_ID is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG is required"
    return 1
  fi

  if [ ! -f "$PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG" ]; then
    log::error "[prepare] file($PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG) is not found"
    return 1
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_BUILD_ID_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_BUILD_ID_DIR
  fi

  if [ ! -d "$PLUGIN_EUNOMIA_DOCKERFILES_DIR" ]; then
    log::error "[config] Dockerfiles Dir($PLUGIN_EUNOMIA_DOCKERFILES_DIR) not found"
    return 1
  fi

  if [ -z "$(ls $PLUGIN_EUNOMIA_DOCKERFILES_DIR)" ]; then
    log::error "[config] Dockerfiles Dir($PLUGIN_EUNOMIA_DOCKERFILES_DIR) is empty"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_GIT_REPO_NAME" ]; then
    log::error "[prepare] PLUGIN_EUNOMIA_GIT_REPO_NAME is required"
    return 1
  fi

  # @TODO PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG 很可能是固定路径，这里用于快速备份，避免被后续部署覆盖
  cp $PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG $PLUGIN_EUNOMIA_BUILD_ID_PKG
  # PLUGIN_EUNOMIA_DOWNLOAD_GIT_PKG 使命完成，后续使用 PLUGIN_EUNOMIA_BUILD_ID_PKG

  # Extract Git Repo
  if [ ! -d "$PLUGIN_EUNOMIA_BUILD_GIT_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_BUILD_GIT_DIR
    tar -zxvf $PLUGIN_EUNOMIA_BUILD_ID_PKG -C $PLUGIN_EUNOMIA_BUILD_GIT_DIR >>/dev/null
  fi
  # PLUGIN_EUNOMIA_BUILD_ID_PKG 使命完成

  # Go to Git Repo Dir
  cd $PLUGIN_EUNOMIA_BUILD_GIT_DIR

  # @LOAD Git Repo Env
  # echo "check env .eunomia: $PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV"
  if [ -f "$PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV" ]; then
    log::info "[prepare] load user env .eunomia: $PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV"

    cat $PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV

    dotenv::load $PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV
    if [ "$?" != "0" ]; then
      log::error "[prepare] failed to load repo env($PLUGIN_EUNOMIA_BUILD_GIT_DOT_ENV)"
      return 1
    fi
  fi

  # USER
  export PLUGIN_EUNOMIA_BUILD_AUTHOR=${PLUGIN_EUNOMIA_BUILD_AUTHOR:-$EUNOMIA_AUTHOR}
  export PLUGIN_EUNOMIA_BUILD_AUTHOR_EMAIL=${PLUGIN_EUNOMIA_BUILD_AUTHOR_EMAIL:-$EUNOMIA_AUTHOR_EMAIL}

  # @TODO Eunomia Manager
  export PLUGIN_EUNOMIA_PROJECT_ID=${PLUGIN_EUNOMIA_PROJECT_ID:-$EUNOMIA_PROJECT_ID}
  export PLUGIN_EUNOMIA_TASK_ID=${PLUGIN_EUNOMIA_TASK_ID:-$EUNOMIA_TASK_ID}
  export PLUGIN_EUNOMIA_DEPLOYMENT_ID=${PLUGIN_EUNOMIA_DEPLOYMENT_ID:-$EUNOMIA_DEPLOYMENT_ID}
  export PLUGIN_EUNOMIA_JOB_ID=${PLUGIN_EUNOMIA_JOB_ID:-$EUNOMIA_JOB_ID}

  # Log Eunomia Manager Info
  if [ -n "$PLUGIN_EUNOMIA_PROJECT_ID" ]; then
    log::info "[prepare] PLUGIN_EUNOMIA_PROJECT_ID: $PLUGIN_EUNOMIA_PROJECT_ID"
    log::info "[prepare] PLUGIN_EUNOMIA_TASK_ID: $PLUGIN_EUNOMIA_TASK_ID"
    log::info "[prepare] PLUGIN_EUNOMIA_DEPLOYMENT_ID: $PLUGIN_EUNOMIA_DEPLOYMENT_ID"
    log::info "[prepare] PLUGIN_EUNOMIA_JOB_ID: $PLUGIN_EUNOMIA_JOB_ID"
  fi

  # Hook with Eunomia
  export PLUGIN_EUNOMIA_LOG_HOOK=${PLUGIN_EUNOMIA_LOG_HOOK:-"$EUNOMIA_LOG_HOOK"}
  export PLUGIN_EUNOMIA_START_HOOK=${PLUGIN_EUNOMIA_START_HOOK:-"$EUNOMIA_START_HOOK"}
  export PLUGIN_EUNOMIA_SUCCEED_HOOK=${PLUGIN_EUNOMIA_SUCCEED_HOOK:-"$EUNOMIA_SUCCEED_HOOK"}
  export PLUGIN_EUNOMIA_FAILED_HOOK=${PLUGIN_EUNOMIA_FAILED_HOOK:-"$EUNOMIA_FAILED_HOOK"}

  # @ Repo
  GIT_REPO_NAMESPACE=$(git config --get remote.origin.url | awk -F '/' '{print $4}')
  GIT_REPO_BASE_NAME=$(git config --get remote.origin.url | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
  GIT_COMMIT=$(git rev-parse HEAD)
  export PLUGIN_EUNOMIA_GIT_REPO_URL=$(git config --get remote.origin.url)
  export PLUGIN_EUNOMIA_GIT_REPO_NAME=${GIT_REPO_NAMESPACE}/${GIT_REPO_BASE_NAME}
  export PLUGIN_EUNOMIA_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  export PLUGIN_EUNOMIA_GIT_COMMIT=$(git rev-parse HEAD)
  export PLUGIN_EUNOMIA_GIT_COMMIT_MESSAGE=$(git log --format=%B -n 1 $GIT_COMMIT)
  export PLUGIN_EUNOMIA_GIT_COMMIT_AUTHOR=$(git show -s --format='%ae' $GIT_COMMIT)
  export PLUGIN_EUNOMIA_GIT_COMMIT_TIMESTAMP="$(git show -s --format=%cd --date='format:%Y-%m-%d_%H:%M:%S')"

  # @COPY Dockerfile
  export PLUGIN_EUNOMIA_DOCKERFILE_FOR_GIT_REPO=${PLUGIN_EUNOMIA_DOCKERFILES_DIR}/${PLUGIN_EUNOMIA_GIT_REPO_NAME}/Dockerfile
  export PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO=${PLUGIN_EUNOMIA_DOCKERFILES_DIR}/${PLUGIN_EUNOMIA_GIT_REPO_NAME}/.eunomia
  if [ ! -f "$PLUGIN_EUNOMIA_DOCKERFILE_FOR_GIT_REPO" ]; then
    log::error "[eunomia::build] Dockerfile not found at for $PLUGIN_EUNOMIA_GIT_REPO_NAME"
    return 1
  fi

  # @LOAD Dockerfile Repo Env
  # support custom PLUGIN_EUNOMIA_EXPORT_RUNNER_DIST_DIR and others
  if [ -f "${PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO}" ]; then
    log::info "[prepare] load dockerfile env(${PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO})"

    cat $PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO

    dotenv::load $PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO
    if [ "$?" != "0" ]; then
      log::error "[prepare] failed to load dockerfile .eunomia($PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO)"
      return 1
    fi
  fi

  ##############
  ##############
  if [ -n "$PLUGIN_EUNOMIA_BUILD_HASH" ]; then
    export PIPELINE_IMAGE_TAGS=commit_${PLUGIN_EUNOMIA_BUILD_HASH}
  elif [ -n "$PIPELINE_BUILD_HASH" ]; then
    export PIPELINE_IMAGE_TAGS=commit_${PIPELINE_BUILD_HASH}
  fi

  # plugin-pipeline
  export PIPELINE_BUILD_ID=${PLUGIN_EUNOMIA_BUILD_ID}
  export PIPELINE_BUILD_CONTEXT=$PLUGIN_EUNOMIA_BUILD_ID_DIR
  export PIPELINE_GIT_REPOSITORY_DIR=$PLUGIN_EUNOMIA_BUILD_GIT_DIR
  export PIPELINE_DOCKER_REGISTRY=$PLUGIN_EUNOMIA_DOCKER_REGISTRY
  export PIPELINE_IMAGE_NAME=$PLUGIN_EUNOMIA_GIT_REPO_NAME
  export PIPELINE_IMAGE_TAGS=commit_${PLUGIN_EUNOMIA_BUILD_HASH:-${PLUGIN_EUNOMIA_BUILD_ID}}
  ##############
  ##############

  if [ -n "$PIPELINE_IMAGE_TAGS" ]; then
    export PLUGIN_EUNOMIA_EXPORT_RUNNER_IMAGE=$PLUGIN_EUNOMIA_DOCKER_REGISTRY/$PIPELINE_IMAGE_NAME:$PIPELINE_IMAGE_TAGS
  fi
}

export -f eunomia::prepare
