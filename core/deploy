#!/bin/bash

eunomia::deploy() {
  # check online scripts
  log::info "[$(timestamp)] checking online scripts ..."
  if [ "$(eunomia::deploy_scripts_exists)" = "true" ]; then
    export EUNOMIA_DEPLOY_MODE="online_script"
  fi

  # check local scripts
  if [ "$EUNOMIA_DEPLOY_MODE" != "online_script" ]; then
    log::info "[$(timestamp)] checking local scripts ..."
    if [ "$EUNOMIA_DEPLOY_SKIP_DEPLOY_SCRIPT" != "true" ]; then
      if [ -f "${EUNOMIA_DEPLOY_SCRIPT}" ]; then
        export EUNOMIA_DEPLOY_MODE="script"
      fi
    fi
  fi

  case $EUNOMIA_DEPLOY_MODE in
  script)
    log::info "[$(timestamp)][eunomia::deploy] start to deploy script ..."
    eunomia::deploy_script
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::deploy] failed to deploy script"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::deploy] succeed to deploy script"
    return 0
    ;;
  online_script)
    log::info "[$(timestamp)][eunomia::deploy] start to deploy script(online) ..."
    eunomia::deploy_script_online
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::deploy] failed to deploy script(online)"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::deploy] succeed to deploy script(online)"
    return 0
    ;;
  service)
    log::info "[$(timestamp)][eunomia::deploy] start to deploy service ..."
    eunomia::deploy_service
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::deploy] failed to deploy service"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::deploy] succeed to deploy service"
    return 0
    ;;
  component)
    log::info "[$(timestamp)][eunomia::deploy] start to deploy component ..."
    eunomia::deploy_component
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::deploy] failed to deploy component"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::deploy] succeed to deploy component"
    return 0
    ;;
  *)
    log::error "[$(timestamp)][eunomia::deploy] unsupport deploy mode: $EUNOMIA_DEPLOY_MODE"
    return 1
    ;;
  esac
}

eunomia::deploy_script() {
  if [ -z "$EUNOMIA_DEPLOY_HOST" ]; then
    log::error "[eunomia::deploy_script] EUNOMIA_DEPLOY_HOST is required"
    return 1
  fi

  if [ ! -f "$EUNOMIA_DEPLOY_SCRIPT" ]; then
    log::error "[eunomia::deploy_script] EUNOMIA_DEPLOY_SCRIPT is required"
    return 1
  fi

  if [ ! -f "$EUNOMIA_BUILD_ENV_SHELL" ]; then
    log::error "[eunomia::deploy_script] EUNOMIA_BUILD_ENV_SHELL is required"
    return 1
  fi

  log::info "[$(timestamp)][eunomia::deploy_script] start to execute ..."
  gzcaas client \
    -s ${EUNOMIA_DEPLOY_HOST} \
    --scriptfile ${EUNOMIA_DEPLOY_SCRIPT} \
    --envfile ${EUNOMIA_BUILD_ENV_SHELL}
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_script] failed to execute"
    return 1
  fi

  log::success "[$(timestamp)][eunomia::deploy_script] succeed to execute"
}

eunomia::deploy_script_online() {
  if [ ! -f "$EUNOMIA_BUILD_ENV_SHELL" ]; then
    log::error "[eunomia::deploy_script_online] EUNOMIA_BUILD_ENV_SHELL is required"
    return 1
  fi

  mkdir -p $EUNOMIA_DEPLOY_SCRIPTS_DIR

  log::info "[$(timestamp)][eunomia::deploy_script_online] start to execute ..."
  plugin::run_zx execute_deploy_scripts
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_script_online] failed to execute"
    return 1
  fi
  
  log::success "[$(timestamp)][eunomia::deploy_script_online] succeed to execute"
}

eunomia::deploy_service() {
  # config
  if [ -z "$PLUGIN_EUNOMIA_DOCKER_REGISTRY" ]; then
    log::error "[eunomia::deploy_service] PLUGIN_EUNOMIA_DOCKER_REGISTRY is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_CONFIG_CENTER" ]; then
    log::error "[eunomia::deploy_service] PLUGIN_EUNOMIA_CONFIG_CENTER is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID" ]; then
    log::error "[eunomia::deploy_service] PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_ID is required"
    return 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET" ]; then
    log::error "[eunomia::deploy_service] PLUGIN_EUNOMIA_CONFIG_CENTER_CLIENT_SECRET is required"
    return 1
  fi

  # dynamic runner
  if [ -z "$EUNOMIA_GIT_REPOSITORY" ]; then
    log::error "[eunomia::deploy_service] EUNOMIA_GIT_REPOSITORY is required"
    return 1
  fi

  if [ -z "$EUNOMIA_GIT_COMMIT" ]; then
    log::error "[eunomia::deploy_service] EUNOMIA_GIT_COMMIT is required"
    return 1
  fi

  if [ -z "$EUNOMIA_TASK_ID" ]; then
    log::error "[eunomia::deploy_service] EUNOMIA_TASK_ID is required"
    return 1
  fi

  #
  export PLUGIN_EUNOMIA_DEPLOYMENT_IMAGE_NAME=$(echo ${EUNOMIA_GIT_REPOSITORY#http://10.27.249.150:8888/})

  # DOCKER_HOST
  case $EUNOMIA_DEPLOYMENT_ENV in
  "dev")
    export DOCKER_HOST=$EUNOMIA_DEPLOYMENT_DEV_DOCKER_HOST
    export PLUGIN_EUNOMIA_DEPLOYMENT_NAME=eunomia_deployment_dev_${EUNOMIA_TASK_ID}
    export PLUGIN_EUNOMIA_DEPLOYMENT_EXTRA_HOSTNAME=${EUNOMIA_TASK_ID}.dev.idp.internal

    # custom domain name
    #   pattern: {CUSTOM_DOMAIN_NAME}-dev.example.com
    if [ -n "$EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME" ]; then
      export PLUGIN_EUNOMIA_DEPLOYMENT_NAME=eunomia_deployment_dev_${EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME}
      export PLUGIN_EUNOMIA_DEPLOYMENT_EXTRA_HOSTNAME=${EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME}.dev.idp.internal
    fi
    ;;
  "prod")
    export DOCKER_HOST=$EUNOMIA_DEPLOYMENT_PROD_DOCKER_HOST
    export PLUGIN_EUNOMIA_DEPLOYMENT_NAME=eunomia_deployment_prod_${EUNOMIA_TASK_ID}
    export PLUGIN_EUNOMIA_DEPLOYMENT_EXTRA_HOSTNAME=${EUNOMIA_TASK_ID}.prod.idp.internal

    # custom domain name
    #   pattern: {CUSTOM_DOMAIN_NAME}.example.com
    if [ -n "$EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME" ]; then
      export PLUGIN_EUNOMIA_DEPLOYMENT_NAME=eunomia_deployment_prod_${EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME}
      export PLUGIN_EUNOMIA_DEPLOYMENT_EXTRA_HOSTNAME=${EUNOMIA_DEPLOYMENT_CUSTOM_DOMAIN_NAME}.prod.idp.internal
    fi
    ;;
  *)
    log::error "[$(timestamp)][eunomia::deploy_service] unknown EUNOMIA_DEPLOYMENT_ENV: $EUNOMIA_DEPLOYMENT_ENV"
    return 1
    ;;
  esac

  # env shell
  export EUNOMIA_BUILD_ENV_SHELL=$EUNOMIA_DEPLOYMENT_ENV_SHELL
  log::info "[$(timestamp)][eunomia::deploy_service] start to generate deployment env shell at ${EUNOMIA_BUILD_ENV_SHELL} ..."
  plugin::run_zx env_shell
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_service] failed to generate deployment env shell at ${EUNOMIA_BUILD_ENV_SHELL}."
    return 1
  fi
  log::success "[$(timestamp)][eunomia::deploy_service] succeed to generate deployment env shell at ${EUNOMIA_BUILD_ENV_SHELL} ..."

  # env config
  # @TODO avoid docker-compose env file error when file not found
  echo > $EUNOMIA_DEPLOYMENT_ENV_CONFIG
  #
  if [ -n "$EUNOMIA_DEPLOYMENT_CONFIG_ID" ]; then
    log::info "[$(timestamp)][eunomia::deploy_service] start to generate deployment env config at ${EUNOMIA_DEPLOYMENT_ENV_CONFIG} ..."
    plugin::run_zx env_config
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::deploy_service] failed to generate deployment env config at ${EUNOMIA_DEPLOYMENT_ENV_CONFIG}."
      return 1
    fi
    log::success "[$(timestamp)][eunomia::deploy_service] succeed to generate deployment env config at ${EUNOMIA_DEPLOYMENT_ENV_CONFIG} ..."
  fi

  #
  export PLUGIN_EUNOMIA_DEPLOYMENT_DATA_DIR=${EUNOMIA_DEPLOYMENT_DIR}/data
  export PLUGIN_EUNOMIA_DEPLOYMENT_CONFIG_DIR=${EUNOMIA_DEPLOYMENT_DIR}/configs
  export PLUGIN_EUNOMIA_DEPLOYMENT_LOG_DIR=${EUNOMIA_DEPLOYMENT_DIR}/logs
  if [ ! -d "$PLUGIN_EUNOMIA_DEPLOYMENT_DATA_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_DEPLOYMENT_DATA_DIR
  fi
  if [ ! -d "$PLUGIN_EUNOMIA_DEPLOYMENT_CONFIG_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_DEPLOYMENT_CONFIG_DIR
  fi
  if [ ! -d "$PLUGIN_EUNOMIA_DEPLOYMENT_LOG_DIR" ]; then
    mkdir -p $PLUGIN_EUNOMIA_DEPLOYMENT_LOG_DIR
  fi
  # ERROR_LOG
  export PLUGIN_EUNOMIA_DEPLOYMENT_DEPLOY_LOG=${PLUGIN_EUNOMIA_DEPLOYMENT_LOG_DIR}/deploy.log
  export PLUGIN_EUNOMIA_DEPLOYMENT_ERROR_LOG=${PLUGIN_EUNOMIA_DEPLOYMENT_LOG_DIR}/error.log

  # COMPOSE
  export COMPOSE_PROJECT_NAME=$PLUGIN_EUNOMIA_DEPLOYMENT_NAME

  # generate manifest file from template
  export COMPOSE_FILE=$PLUGIN_CONFIG_DIR/templates/docker-compose.deployment.${EUNOMIA_DEPLOYMENT_MODE}.yml
  if [ ! -f "$COMPOSE_FILE" ]; then
    log::error "[$(timestamp)][eunomia::deploy_service] unsupport deployment mode: ${EUNOMIA_DEPLOYMENT_MODE}"
    return 1
  fi

  docker-compose config > $EUNOMIA_DEPLOYMENT_MANIFEST_FILE
  # service manifest file
  export COMPOSE_FILE=$EUNOMIA_DEPLOYMENT_MANIFEST_FILE

  log::info "[$(timestamp)][eunomia::deploy_service] Environment: ${EUNOMIA_DEPLOYMENT_ENV}"
  # log::info "[$(timestamp)][eunomia::deploy_service] Docker Service at: ${DOCKER_HOST:-Current_Host}"

  local tmp_error=$(os::tmp_file)
  log::info "[$(timestamp)][eunomia::deploy_service] start to deploy ..."
  docker-compose up --detach --remove-orphans # 2>$tmp_error
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_service] failed to deploy."
    cat $tmp_error
    cat $tmp_error >>$PLUGIN_EUNOMIA_DEPLOYMENT_ERROR_LOG
    return 1
  fi

  log::success "[$(timestamp)][eunomia::deploy_service] succeed to deploy."
}

# @TO_IMPLEMENT
eunomia::deploy_component() {
  # module_name: EUNOMIA_DEPLOY_COMPONENT_MODULE_NAME
  # version_type: EUNOMIA_DEPLOY_COMPONENT_VERSION_TYPE
  # cluster_version: EUNOMIA_DEPLOY_COMPONENT_CLUSTER_VERSION
  # os: EUNOMIA_DEPLOY_COMPONENT_OS
  # version_num: EUNOMIA_DEPLOY_COMPONENT_VERSION_NUM
  # cpu_arch: EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH

  local tmp_error=$(os::tmp_file)

  # 1. upload file with os::oss_upload
  log::info "[$(timestamp)][eunomia::deploy_component] start to upload oss ..."

  # 1.1 generate oss path
  log::info "[$(timestamp)][eunomia::deploy_component] generate oss path ..."
  eunomia::deploy_component_generate_oss_path
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component] failed to generate oss path."
    return 1
  fi
  log::info "[$(timestamp)][eunomia::deploy_component] succeed to generate oss path: ${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH} ."

  # 1.2 upload file
  # build remote oss path
  # 1.2 upload file: PLUGIN_EUNOMIA_EXPORT_ID_PKG
  log::info "[$(timestamp)][eunomia::deploy_component] start to download artifact from docker ..."
  # unzip file
  eunomia::deploy_component_get_artifact
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_service] failed to download artifact from docker."
    return 1
  fi

  # upload to oss
  log::info "[$(timestamp)][eunomia::deploy_component] upload file to oss  ..."
  eunomia::deploy_component_upload_file
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component] failed to upload file to oss."
    return 1
  fi

  # 2. create a version record
  log::info "[$(timestamp)][eunomia::deploy_component] create a version release record ..."
  eunomia::deploy_component_create_version
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component] failed to create a version release record."
    return 1
  fi

  rm -f $tmp_error
}

eunomia::deploy_component_generate_oss_path() {
  local response_file=$(os::tmp_file)

  # debug info
  cat <<EOF
POST ${EUNOMIA_DEPLOY_COMPONENT_SERVER}/api/open/ms/ta-version-managements/versions/paths/generate

{
  "module_name": "${EUNOMIA_DEPLOY_COMPONENT_MODULE_NAME}",
  "cluster_version": "${EUNOMIA_DEPLOY_COMPONENT_CLUSTER_VERSION}",
  "version": "${EUNOMIA_DEPLOY_COMPONENT_VERSION}",
  "version_type": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_TYPE}",
  "version_num": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_NUM}",
  "cpu_arch": "${EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH}",
  "os": "${EUNOMIA_DEPLOY_COMPONENT_OS}"
}
EOF

  curl \
    -X POST ${EUNOMIA_DEPLOY_COMPONENT_SERVER}/api/open/ms/ta-version-managements/versions/paths/generate \
    -o $response_file \
    -H "Content-Type: application/json" \
    --data-binary @- <<EOF
{
  "module_name": "${EUNOMIA_DEPLOY_COMPONENT_MODULE_NAME}",
  "cluster_version": "${EUNOMIA_DEPLOY_COMPONENT_CLUSTER_VERSION}",
  "version": "${EUNOMIA_DEPLOY_COMPONENT_VERSION}",
  "version_type": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_TYPE}",
  "version_num": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_NUM}",
  "cpu_arch": "${EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH}",
  "os": "${EUNOMIA_DEPLOY_COMPONENT_OS}"
}
EOF
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component_generate_oss_path] failed to generate oss path (1)."
    rm -f $response_file
    return 1
  fi

  local response=$(cat $response_file)
  log::info "[$(timestamp)][eunomia::deploy_component_generate_oss_path] generate oss path response: ${response} ..."
  local response_code=$(echo "$response" | jq -r '.code')
  if [ "$response_code" != "200" ]; then
    rm -f $response_file
    log::error "[$(timestamp)][eunomia::deploy_component_generate_oss_path] failed to generate oss path (2) (response_code: $response_code)."
    return 1
  fi

  export EUNOMIA_DEPLOY_COMPONENT_OSS_PATH=$(echo "$response" | jq -r '.result.oss_path')
  log::info "[$(timestamp)][eunomia::deploy_component_generate_oss_path] oss path: ${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH}"

  rm -f $response_file
}

eunomia::deploy_component_get_artifact() {
  wget -c $EUNOMIA_EXPORT_DIST_URL
  if [ "$?" != "0" ]; then
    log::error "failed to download ${EUNOMIA_BUILD_ID}.tar.gz"
    return 1
  fi

  tar -zxvf ${EUNOMIA_BUILD_ID}.tar.gz -C .
}

eunomia::deploy_component_create_version() {
  local artificat_md5=$(eunomia::deploy_component_get_artifact_md5 $EUNOMIA_DEPLOY_COMPONENT_FILE_NAME)
  log::info "[$(timestamp)][eunomia::deploy_component_create_version] artifact_md5: ${artificat_md5}"

  # debug info
  cat <<EOF
POST ${EUNOMIA_DEPLOY_COMPONENT_SERVER}/api/open/ms/ta-version-managements/versions

{
  "module_name": "${EUNOMIA_DEPLOY_COMPONENT_MODULE_NAME}",
  "cluster_version": "${EUNOMIA_DEPLOY_COMPONENT_CLUSTER_VERSION}",
  "version": "${EUNOMIA_DEPLOY_COMPONENT_VERSION}",
  "git_commit_id": "${EUNOMIA_GIT_COMMIT}",
  "version_type": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_TYPE}",
  "operator": "${EUNOMIA_BUILD_AUTHOR_ID}",
  "artifacts": [
    {
      "cpu_arch": "${EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH}",
      "artifact_path": "${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH}",
      "artifact_md5": "${artificat_md5}",
      "os": "${EUNOMIA_DEPLOY_COMPONENT_OS}",
      "version_num": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_NUM}"
    }
  ]
}
EOF

  local response_file=$(os::tmp_file)
  curl \
    -X POST ${EUNOMIA_DEPLOY_COMPONENT_SERVER}/api/open/ms/ta-version-managements/versions \
    -o $response_file \
    -H "Content-Type: application/json" \
    --data-binary @- <<EOF
{
  "module_name": "${EUNOMIA_DEPLOY_COMPONENT_MODULE_NAME}",
  "cluster_version": "${EUNOMIA_DEPLOY_COMPONENT_CLUSTER_VERSION}",
  "version": "${EUNOMIA_DEPLOY_COMPONENT_VERSION}",
  "git_commit_id": "${EUNOMIA_GIT_COMMIT}",
  "version_type": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_TYPE}",
  "operator": "${EUNOMIA_BUILD_AUTHOR_ID}",
  "artifacts": [
    {
      "cpu_arch": "${EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH}",
      "artifact_path": "${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH}",
      "artifact_md5": "${artificat_md5}",
      "os": "${EUNOMIA_DEPLOY_COMPONENT_OS}",
      "version_num": "${EUNOMIA_DEPLOY_COMPONENT_VERSION_NUM}"
    }
  ]
}
EOF
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component_create_version] failed to create version (1)."
    rm -f $response_file
    return 1
  fi

  local response=$(cat $response_file)
  log::info "[$(timestamp)][eunomia::deploy_component_create_version] create version response: $response ."

  local response_code=$(cat "$response_file" | jq -r '.code')
  if [ "$response_code" != "200" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component_create_version] failed to create version (2) (response_code: $response_code)."
    rm -f $response_file
    return 1
  fi

  rm -f $response_file
}

eunomia::deploy_component_get_artifact_md5() {
  local file_path=$1
  md5sum $file_path | awk '{print $1}'
}

eunomia::deploy_component_upload_file() {
  log::info "[$(timestamp)][eunomia::deploy_component_upload_file] start to upload file to oss (file_path: $PWD/$EUNOMIA_DEPLOY_COMPONENT_FILE_NAME, oss_path: ${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH}) ..."
  os::ossutil cp $PWD/$EUNOMIA_DEPLOY_COMPONENT_FILE_NAME oss://${EUNOMIA_DEPLOY_COMPONENT_OSS_BUCKET}/${EUNOMIA_DEPLOY_COMPONENT_OSS_ROOT}${EUNOMIA_DEPLOY_COMPONENT_OSS_PATH}
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::deploy_component_upload_file] failed to upload file to oss."
    return 1
  fi

  log::info "[$(timestamp)][eunomia::deploy_component_upload_file] upload file to oss success"
}

eunomia::deploy_scripts_exists() {
  plugin::run_zx is_deploy_scripts_exist
}

export -f eunomia::deploy

export -f eunomia::deploy_script
export -f eunomia::deploy_script_online
export -f eunomia::deploy_service

export -f eunomia::deploy_component
export -f eunomia::deploy_component_generate_oss_path
export -f eunomia::deploy_component_get_artifact
export -f eunomia::deploy_component_create_version
export -f eunomia::deploy_component_get_artifact_md5

export -f eunomia::deploy_component_upload_file

export -f eunomia::deploy_scripts_exists
