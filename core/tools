#!/bin/bash

eunomia::checkout_git() {
  if [ -z "$EUNOMIA_GIT_BRANCH" ]; then
    log::error "[eunomia::checkout] env EUNOMIA_GIT_BRANCH is required"
    return 1
  fi

  if [ -z "$EUNOMIA_GIT_COMMIT" ]; then
    log::error "[eunomia::checkout] env EUNOMIA_GIT_COMMIT is required"
    return 1
  fi

  if [ -z "$EUNOMIA_GIT_CHECKOUT_DIR" ]; then
    log::error "[eunomia::checkout] env EUNOMIA_GIT_CHECKOUT_DIR is required"
    return 1
  fi

  if [ -z "$EUNOMIA_GIT_REPOSITORY" ]; then
    log::error "[eunomia::checkout] env EUNOMIA_GIT_REPOSITORY is required"
    return 1
  fi

  log::info "[$(timestamp)][eunomia::checkout_git] checkouting $EUNOMIA_GIT_REPOSITORY at branch $EUNOMIA_GIT_BRANCH ..."
  if ! git::checkout $EUNOMIA_GIT_BRANCH $EUNOMIA_GIT_COMMIT $EUNOMIA_GIT_CHECKOUT_DIR $EUNOMIA_GIT_REPOSITORY; then
    log::error "[$(timestamp)][eunomia::checkout_git] failed to checkout $EUNOMIA_GIT_REPOSITORY at branch $EUNOMIA_GIT_BRANCH."
    return 1
  fi

  cd $EUNOMIA_GIT_CHECKOUT_DIR

  tar -zcvf ${EUNOMIA_STORAGE_GITS_DIR}/${EUNOMIA_BUILD_ID}.git.tar.gz . >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::checkout_git] failed to tar $EUNOMIA_GIT_CHECKOUT_DIR."
    return 1
  fi

  # clean
  rm -rf $EUNOMIA_GIT_CHECKOUT_DIR >>/dev/null 2>&1

  log::info "[$(timestamp)][eunomia::checkout_git] checkout $EUNOMIA_GIT_REPOSITORY at branch $EUNOMIA_GIT_BRANCH success."
}

# eunomia::export_product downloads the export_product dist
eunomia::export_product() {
  if [ -z "$EUNOMIA_EXPORT_DIST_URL" ]; then
    log::error "[$(timestamp)] EUNOMIA_EXPORT_DIST_URL is required"
    return 1
  fi

  local filepath=$1
  if [ -z "$filepath" ]; then
    filepath=${EUNOMIA_EXPORT_DIST}
  fi

  if [ -z "$filepath" ]; then
    filepath=./${EUNOMIA_BUILD_ID}.tar.gz
  fi

  if [ -z "$filepath" ]; then
    log::error "[$(timestamp)] filepath is required"
    return 1
  fi

  log::info "[$(timestamp)] start to download product dist ..."
  if ! wget -q -c $EUNOMIA_EXPORT_DIST_URL -O $filepath; then
    log::error "[$(timestamp)] failed to download $EUNOMIA_EXPORT_DIST_URL to $filepath"
    return 1
  fi
  log::info "[$(timestamp)] download product dist success"

  log::info "[$(timestamp)] start to extract product dist ..."
  tar -xvf $filepath -C . >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to extract $filepath"
    return 1
  fi
  log::info "[$(timestamp)] extract product dist success"

  # clean tar.gz
  rm -rf $filepath >>/dev/null 2>&1

  log::info "[$(timestamp)] show product files ..."
  ls -al

  # log::info "[$(timestamp)] start to remove product dist ..."
  # rm -rf $filepath >>/dev/null 2>&1
  # if [ "$?" != "0" ]; then
  #     echo "failed to remove $filepath"
  #     return 1
  # fi
  # log::info "[$(timestamp)] remove product dist success"
}

eunomia::depends_product() {
  eunomia::export_product "$@"
  if [ "$?" != "0" ]; then
    return 1
  fi
}

eunomia::download_product() {
  eunomia::export_product "$@"
  if [ "$?" != "0" ]; then
    return 1
  fi
}

eunomia::depends_git() {
  if [ -z "$EUNOMIA_DEPENDS_GIT_SOURCE_CODE" ]; then
    log::error "[eunomia::depends_git] env EUNOMIA_DEPENDS_GIT_SOURCE_CODE is required"
    return 1
  fi

  local url=https://storage.idp.thinkingdata.cn/gits/${EUNOMIA_BUILD_ID}.git.tar.gz
  local filepath=./${EUNOMIA_BUILD_ID}.git.tar.gz

  log::info "[$(timestamp)][eunomia::depends_git] start to download git source code ..."
  if ! wget -q -c $url -O $filepath; then
    log::error "[$(timestamp)] failed to download $url to $filepath"
    return 1
  fi
  log::info "[$(timestamp)] download git source code success"

  log::info "[$(timestamp)] start to extract git source code ..."
  tar -xvf $filepath -C . >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to extract $filepath"
    return 1
  fi
  log::info "[$(timestamp)] extract git source code success"

  # clean tar.gz
  rm -rf $filepath >>/dev/null 2>&1

  log::info "[$(timestamp)] show git source code files ..."
  ls -al
}

eunomia::upload_git_info() {
  if [ -f ".git" ]; then
    log::error "[$(timestamp)][eunomia::upload_git_info] .git is not a directory"
    return 1
  fi

  export EUNOMIA_GIT_REPO_URL=$(git::origin_url)
  export EUNOMIA_GIT_REPO_NAME=$(git::repo_name)
  export EUNOMIA_GIT_BRANCH=$(git::branch)
  export EUNOMIA_GIT_COMMIT=$(git::commit_hash_full)
  export EUNOMIA_GIT_COMMIT_MESSAGE=$(git::commit_message | head -n 1)
  export EUNOMIA_GIT_COMMIT_AUTHOR=$(git::commit_author)
  export EUNOMIA_GIT_COMMIT_TIMESTAMP="$(git::commit_timestamp)"

  eunomia::hook_info_supply
}

eunomia::git() {
  os::git "$@"
}

eunomia::tools_tdenv_run() {
  local tdenv=$1
  local command="$2"
  if [ -z "$tdenv" ]; then
    log::error "[eunomia::tools_tdenv_run] tdenv is required"
    return 1
  fi

  if [ -z "$command" ]; then
    log::error "[eunomia::tools_tdenv_run] command is required"
    return 1
  fi

  # log::info "[eunomia::tools_tdenv_run] command($command) in tdenv($tdenv) ..."
  ssh -p 22 \
    -o "BatchMode yes" \
    -o StrictHostKeyChecking=no \
    -i $HOME/.ssh/id_rsa.idp.tdenv \
    root@$tdenv "$command"
  if [ "$?" != "0" ]; then
    return 1
  fi
}

eunomia::tools_tdenv_ta_admin() {
  local tdenv=""
  local args="${@}"

  if [ -n "$EUNOMIA_DEPLOY_TDENV" ]; then
    tdenv=${EUNOMIA_DEPLOY_TDENV#http://}
    tdenv=${tdenv#https://}
    tdenv=$(echo $tdenv | awk -F ':' '{print $1}')
  fi

  # compitable with old version
  if [ -z "$EUNOMIA_DEPLOY_TDENV" ]; then
    if [ -n "$docker_url" ]; then
      tdenv=${docker_url#http://}
      tdenv=${tdenv#https://}
      tdenv=$(echo $tdenv | awk -F ':' '{print $1}')
    fi
  fi

  if [ -z "$tdenv" ]; then
    log::error "[eunomia::tools_tdenv_ta_admin] env EUNOMIA_DEPLOY_TDENV is required"
    return 1
  fi

  if [ -z "$args" ]; then
    log::error "[eunomia::tools_tdenv_ta_admin] args is required"
    return 1
  fi

  log::info "[$(timestamp)][eunomia::tools_tdenv_ta_admin] args(ta-admin $args) in tdenv($tdenv) ..."
  eunomia::tools_tdenv_run "$tdenv" "/data/app/.admin_manager_ta/ta-admin $args"
  if [ "$?" != "0" ]; then
    log::error "[eunomia::tools_tdenv_ta_admin] failed to run command(ta-admin $args) in tdenv($tdenv)"
    return 1
  fi

  log::info "[$(timestamp)][eunomia::tools_tdenv_ta_admin] succeed to run command(ta-admin $args) in tdenv($tdenv)"
}

export -f eunomia::checkout_git

export -f eunomia::export_product
export -f eunomia::download_product

export -f eunomia::depends_product
export -f eunomia::depends_git

export -f eunomia::upload_git_info

export -f eunomia::git

export -f eunomia::tools_tdenv_run
export -f eunomia::tools_tdenv_ta_admin
