#!/bin/bash

eunomia::build() {
  if [ -z "$EUNOMIA_BUILD_GIT_DIR" ]; then
    log::error "[$(timestamp)][eunomia::build] EUNOMIA_BUILD_GIT_DIR is required"
    return 1
  fi

  if [ ! -d "$EUNOMIA_BUILD_GIT_DIR" ]; then
    log::error "[$(timestamp)][eunomia::build] EUNOMIA_BUILD_GIT_DIR($EUNOMIA_BUILD_GIT_DIR) not found, you must run prepare first"
    return 1
  fi

  eunomia::build_info

  # check scripts
  log::info "[$(timestamp)] checking scripts ..."
  if [ "$(eunomia::build_scripts_exists)" = "true" ]; then
    export EUNOMIA_BUILD_MODE="script"
    log::info "[$(timestamp)] found scripts, build mode: $EUNOMIA_BUILD_MODE"
  else
    log::info "[$(timestamp)] no scripts found"
  fi

  case $EUNOMIA_BUILD_MODE in
  image)
    log::info "[$(timestamp)][eunomia::build] start to build image with dockerfile ..."
    eunomia::build_image
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::build] failed to build image with dockerfile"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::build] succeed to build image with dockerfile"
    return 0
    ;;
  script)
    log::info "[$(timestamp)][eunomia::build] start to build script ..."
    eunomia::build_script
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::build] failed to build script"
      return 1
    fi

    log::success "[$(timestamp)][eunomia::build] succeed to build script"
    return 0
    ;;
  *)
    log::error "[$(timestamp)][eunomia::build] unsupport build mode: $EUNOMIA_BUILD_MODE"
    return 1
    ;;
  esac
}

eunomia::build_info() {
  # ADD build files for dockerfile
  cat <<EOF >$EUNOMIA_BUILD_GIT_DIR/build.eunomia.js
# GIT
EUNOMIA_GIT_REPO_URL: $EUNOMIA_GIT_REPO_URL
EUNOMIA_GIT_REPO_NAME: $EUNOMIA_GIT_REPO_NAME
EUNOMIA_GIT_BRANCH: $EUNOMIA_GIT_BRANCH
EUNOMIA_GIT_COMMIT: $EUNOMIA_GIT_COMMIT
EUNOMIA_GIT_COMMIT_MESSAGE: $EUNOMIA_GIT_COMMIT_MESSAGE
EUNOMIA_GIT_COMMIT_AUTHOR: $EUNOMIA_GIT_COMMIT_AUTHOR
EUNOMIA_GIT_COMMIT_TIMESTAMP: $EUNOMIA_GIT_COMMIT_TIMESTAMP
# Builder
EUNOMIA_BUILD_ID: $EUNOMIA_BUILD_ID
EUNOMIA_BUILD_AUTHOR: $EUNOMIA_BUILD_AUTHOR
EUNOMIA_BUILD_AUTHOR_EMAIL: $EUNOMIA_BUILD_AUTHOR_EMAIL
EUNOMIA_BUILD_TIMESTAMP: $EUNOMIA_BUILD_TIMESTAMP
EUNOMIA_BUILD_FROM: $EUNOMIA_BUILD_FROM
# Project
EUNOMIA_PROJECT_ID: $EUNOMIA_PROJECT_ID
EUNOMIA_TASK_ID: $EUNOMIA_TASK_ID
EUNOMIA_DEPLOYMENT_ID: $EUNOMIA_DEPLOYMENT_ID
EUNOMIA_JOB_ID: $EUNOMIA_JOB_ID
# Module
EUNOMIA_DOCKERFILE_MODULE: $PLUGIN_EUNOMIA_DOCKERFILE_MODULE
# Version (TE_VERSION)
EUNOMIA_USER_VAR_VERSION: ${EUNOMIA_USER_VAR_VERSION}
# Application (TE_MODULE)
EUNOMIA_APPLICATION_NAME: ${EUNOMIA_APPLICATION_NAME}
EOF
}

eunomia::build_scripts_exists() {
  plugin::run_zx is_build_scripts_exist
}

eunomia::create_image_record() {
  plugin::run_zx create_image_record
}

eunomia::build_image() {
  #    Solution 2 => 本地 Dockerfile 优先级小于于全局服务 zmicro dockerfiles 中的
  log::info "[$(timestamp)][eunomia::build_image] checking Dockerfile exist ..."
  if [ -d "$PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO" ]; then
    log::info "[$(timestamp)][eunomia::build_image] dockerfiles found repo, so use repo ..."
    # RSYNC DOKCERFILE_DIR/*
    # @TODO with "DIR/" suffix copy file
    if [ -n "$PLUGIN_EUNOMIA_DOCKERFILE_MODULE" ]; then
      # log::info "[$(timestamp)][eunomia::build_image] using PLUGIN_EUNOMIA_DOCKERFILE_MODULE(${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/$PLUGIN_EUNOMIA_DOCKERFILE_MODULE/) ..."
      # 子模块
      rsync -av ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/$PLUGIN_EUNOMIA_DOCKERFILE_MODULE/ $EUNOMIA_BUILD_GIT_DIR
    else
      # log::info "[$(timestamp)][eunomia::build_image] using PLUGIN_EUNOMIA_DOCKERFILE_MODULE(${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/) ..."
      # 主模块
      # rsync -av --exclude="$PLUGIN_EUNOMIA_DOCKERFILE_ENV_FOR_GIT_REPO" ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/ $EUNOMIA_BUILD_GIT_DIR
      rsync -av ${PLUGIN_EUNOMIA_DOCKERFILE_DIR_FOR_GIT_REPO}/ $EUNOMIA_BUILD_GIT_DIR
    fi
  else
    log::info "[$(timestamp)][eunomia::build_image] dockerfiles not found repo, so use local Dockerfile ..."
  fi

  if [ ! -f "$PIPELINE_GIT_REPOSITORY_DIR/Dockerfile" ]; then
    log::error "[$(timestamp)][eunomia::build_image] Dockerfile($PIPELINE_GIT_REPOSITORY_DIR/Dockerfile) not found at for $EUNOMIA_GIT_REPO_NAME"
    return 1
  fi

  export PIPELINE_DOCKER_BUILD_DOCKERFILE=$EUNOMIA_BUILD_DOCKERFILE_PATH
  export PIPELINE_DOCKER_BUILD_ARGS_ENVFILE=$EUNOMIA_BUILD_ENV_SHELL
  log::info "[$(timestamp)][eunomia::build_image] arch: $EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH"
  case $EUNOMIA_DEPLOY_COMPONENT_CPU_ARCH in
  aarch64)
    export PIPELINE_DOCKER_BUILD_PLATFORMS=linux/arm64
    export EUNOMIA_DOCKER_BUILDX_PLATFORMS=linux/arm64
    ;;
  x86_64)
    export PIPELINE_DOCKER_BUILD_PLATFORMS=linux/amd64
    export EUNOMIA_DOCKER_BUILDX_PLATFORMS=linux/amd64
    ;;
  esac

  if [ -n "$EUNOMIA_DOCKER_BUILDX_PLATFORMS" ]; then
    log::info "[$(timestamp)][eunomia::build_image] EUNOMIA_DOCKER_BUILDX_PLATFORMS: $EUNOMIA_DOCKER_BUILDX_PLATFORMS"
  fi

  if [ -n "$EUNOMIA_DOCKER_BUILDX_EXTRA_CONTEXT" ]; then
    export PIPELINE_DOCKER_BUILD_CONTEXT_EXTRA=${EUNOMIA_DOCKER_BUILDX_EXTRA_CONTEXT}
  fi

  # export PIPELINE_DOCKER_BUILD_CACHE_ENABLE=true
  zmicro pipeline bp
  if [ "$?" != "0" ]; then
    log::error "[eunomia::build] failed to build"
    return 1
  fi

  log::info "[$(timestamp)][eunomia::build] start to create image record ..."
  eunomia::create_image_record
  if [ "$?" != "0" ]; then
    log::error "[eunomia::build] failed to create image record"
    return 1
  fi

  # @TODO export product
  log::info "[$(timestamp)][eunomia::build] env PLUGIN_EUNOMIA_EXPORT_DISABLE: $PLUGIN_EUNOMIA_EXPORT_DISABLE"
  if [ "$PLUGIN_EUNOMIA_EXPORT_DISABLE" != "true" ]; then
    # export
    log::info "[$(timestamp)][eunomia::build] exporting product ..."
    eunomia::export
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][eunomia::build] failed to export product"
      return 1
    fi
  fi
}

eunomia::build_script() {
  if [ ! -f "$EUNOMIA_BUILD_ENV_SHELL" ]; then
    log::error "[eunomia::build_script] EUNOMIA_BUILD_ENV_SHELL is required"
    return 1
  fi

  mkdir -p $EUNOMIA_BUILD_SCRIPTS_DIR

  log::info "[$(timestamp)][eunomia::build_script] start to execute ..."
  plugin::run_zx execute_build_scripts
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][eunomia::build_script] failed to execute"
    return 1
  fi

  log::success "[$(timestamp)][eunomia::build_script] succeed to execute"
}

export -f eunomia::build

export -f eunomia::build_info

export -f eunomia::build_scripts_exists
export -f eunomia::create_image_record

export -f eunomia::build_image
export -f eunomia::build_script
