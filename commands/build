#!/bin/bash

# set -e

help() {
  echo "Usage:"
  echo "  zmicro eunomia build"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  if [ "$(zmicro fn os::is_docker)" != "true" ]; then
    log::error "[$(timestamp)][build] the command(flow) can only be run in docker"
    exit 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_BUILD_ID" ]; then
    log::error "[$(timestamp)][build] PLUGIN_EUNOMIA_BUILD_ID is required"
    exit 1
  fi

  if [ -z "$PLUGIN_EUNOMIA_DOWNLOAD_PKG" ]; then
    log::error "[$(timestamp)][build] PLUGIN_EUNOMIA_DOWNLOAD_PKG is required"
    exit 1
  fi

  echo $PLUGIN_EUNOMIA_DOWNLOAD_PKG | grep $PLUGIN_EUNOMIA_TMP_DIR >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][build] PLUGIN_EUNOMIA_DOWNLOAD_PKG(${PLUGIN_EUNOMIA_DOWNLOAD_PKG}) must be starts with ${PLUGIN_EUNOMIA_TMP_DIR}"
    exit 1
  fi

  eunomia::show_version_info

  log::info "[$(timestamp)][build] preparing ..."
  eunomia::prepare
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][build] failed to prepare"
    exit 1
  fi

  if [ "$PLUGIN_EUNOMIA_TASK_QUEUE_IS_ENABLED" = "true" ]; then
    log::info "[$(timestamp)][build] task queue is enabled"

    while true; do
      # random sleep
      local wait_time=$(os::random_int 30 10)
      # log::info "[$(timestamp)][build] wait $wait_time seconds ..."
      os::wait $wait_time

      local total=$(eunomia::task_queue_count_total)
      local running=$(eunomia::task_queue_count_running)

      # @TODO >= 80%
      if [ "$(lock::request eunomia_flow_queue_alert 10)" = "true" ]; then
        if [ "$running" = "$PLUGIN_EUNOMIA_TASK_QUEUE_COCURRENCY" ]; then
          notify::feishu $PLUGIN_EUNOMIA_NOTIFICATION_FEISHU_URL "[$(timestamp)] 任务队列预警" "状态: 当前队列已满（${running}/${total}）\n当前时间: $(timestamp)"
        elif [ "$running" -gt "3" ]; then
          notify::feishu $PLUGIN_EUNOMIA_NOTIFICATION_FEISHU_URL "[$(timestamp)] 任务队列预警" "状态: 当前队列利用率 > 80%（${running}/${total}）\n当前时间: $timestamp"
        fi
      fi

      if [ "$(eunomia::task_queue_is_available)" = "true" ]; then
        log::info "[$(timestamp)][build] task queue is available(running: ${running}, total: ${total}), go ..."
        local start_result=$(eunomia::task_queue_start)
        if [ "$start_result" = "true" ]; then
          log::info "[$(timestamp)][build] task is started"
          break
        else
          log::info "[$(timestamp)][build] task start error($start_result), waiting ..."

          if [ "$(lock::request eunomia_flow_queue_error 10)" = "true" ]; then
            notify::feishu $PLUGIN_EUNOMIA_NOTIFICATION_FEISHU_URL "[$(timestamp)] 任务队列异常" "状态: 发生错误\n错误详情: ${start_result}\n当前时间: $(timestamp)"
          fi
        fi
      else
        log::info "[$(timestamp)][build] task queue is full(running: ${running}, total: ${total}), waiting ..."
      fi
    done
  fi

  # # @TODO if no user found, do something
  # if [ -z "$PLUGIN_EUNOMIA_BUILD_AUTHOR_EMAIL" ]; then
  #   export FORCE_BUILD="true"
  # fi

  if [ -n "$FORCE_BUILD" ]; then
    # build
    log::info "[$(timestamp)][build] force building ..."
    eunomia::build
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][build] failed to build"
      eunomia::task_queue_done >>/dev/null
      exit 1
    fi
  else
    log::info "[$(timestamp)][build] checking ${PLUGIN_EUNOMIA_EXPORT_RUNNER_IMAGE} ..."
    if [ "$(eunomia::is_built)" != "true" ]; then
      # build
      log::info "[$(timestamp)][build] no cache, building ..."
      eunomia::build
      if [ "$?" != "0" ]; then
        log::error "[$(timestamp)][build] failed to build (2)"
        eunomia::task_queue_done >>/dev/null
        exit 1
      fi
    else
      log::info "[$(timestamp)][build] loading cache ..."
    fi
  fi

  log::info "[$(timestamp)][build] env PLUGIN_EUNOMIA_EXPORT_DISABLE: $PLUGIN_EUNOMIA_EXPORT_DISABLE"
  if [ "$PLUGIN_EUNOMIA_EXPORT_DISABLE" != "true" ]; then
    # export
    log::info "[$(timestamp)][build] exporting ..."
    eunomia::export
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][build] failed to export"
      eunomia::task_queue_done >>/dev/null
      exit 1
    fi
  fi

  # done
  log::info "[$(timestamp)][build] done"
  eunomia::task_queue_done >>/dev/null
}

run() {
  core $@
}

run $@
